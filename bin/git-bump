#!/usr/bin/env bash
#
# This script takes the latest git tag (whose format follows the rules of
# semantic versioning), increments the patch number and then creates a new git
# tag using this incremented version.
#
# Suppose that you have the following tag on your repo:
#   v1.0.0
# Doing a `git bump`, the following tag will be created:
#   v1.0.1
#
# You can also pass a "matcher" (or a prefix) to search for different tags:
#   git bump v
#   git bump stable
#   git bump testing
#
set -e

ROOT_DIR=$(dirname "${BASH_SOURCE[0]}")
source "${ROOT_DIR}/../lib/git.sh"
source "${ROOT_DIR}/../lib/utils.sh"

echo "Fetching tags..."
git fetch --tags >/dev/null 2>&1

latest_tag=$(git::latest_tag "${1-v}" || true)

if [ -n "$latest_tag" ]; then
  new_tag=$(semver::increment_patch "$latest_tag")

  printf "The current tag is\n\t%s\n" "$latest_tag"
  printf "The new tag will be\n\t%s\n" "$new_tag"

  read -n1 -p "Press [y] to continue..." -r key
  echo ""

  if [ "${key}" = "y" ]; then
    git tag "${new_tag}" -m "${new_tag}"
  else
    echo "Aborted"
    exit 1
  fi
else
  echo "No previous tag found."
  exit 1
fi
